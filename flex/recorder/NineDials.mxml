<?xml version="1.0" encoding="utf-8"?>

<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
	xmlns:s="library://ns.adobe.com/flex/spark"
	xmlns:mx="library://ns.adobe.com/flex/mx"
	minWidth="270" minHeight="140"
	usePreloader="false"
	creationComplete="init(event)">

	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			
			import mx.events.FlexEvent;
			import com.sjriley.events.MicManagerEvent;
			import com.sjriley.MicManager;
			import com.sjriley.Logger;
			import com.sjriley.PlaybackManager;
			import com.sjriley.UploadManager;
			import com.sjriley.events.UploadManagerEvent;
			import com.jac.ogg.adobe.audio.format.events.WAVWriterEvent;
			import com.jac.ogg.events.OggManagerEvent;
			import com.jac.ogg.OggComments;
			import com.jac.ogg.OggLibVersionInfo;
			import com.jac.ogg.OggManager;
			
			private var sourceName:String;
			private var micManager:MicManager;
			private var playbackManager:PlaybackManager;
			private var uploadManager:UploadManager;
			private var oggManager:OggManager;
			private var encodeQuality:int;
			private var encodeLoopsPerYield:int
			private var notifyProgress:Boolean;
			private var startTime:Number;
			private var wavStartTime:Number;
			private var vorbisStartTime:Number;
			
			public function init(e:FlexEvent):void
			{
				Logger.log("Starting Flex app" );
				 // volume in the final WAV file will be downsampled to 50%
				var volume:Number = .5;

				sourceName = 'Untitled';
				encodeQuality = 1;
				encodeLoopsPerYield = 10;
				micManager = new MicManager();
				micManager.addEventListener(Event.CHANGE, handleMicManagerChange, false, 0, true);
				micManager.addEventListener(MicManagerEvent.MIC_MUTED, handleMicMuted, false, 0, true);
				micManager.initialise();

				playbackManager = new PlaybackManager(micManager);
				playbackManager.addEventListener(Event.CHANGE, handlePlaybackChange, false, 0, true);
				playbackManager.addEventListener(Event.SOUND_COMPLETE, handlePlaybackComplete, false, 0, true);

				uploadManager = new UploadManager();
				uploadManager.addEventListener(UploadManagerEvent.UPLOAD_COMPLETE, handleUploadComplete, false, 0, true);

                ExternalInterface.addCallback("triggerFlexRecord", startRecording);
                ExternalInterface.addCallback("triggerFlexStopRecord", stopRecording);
                ExternalInterface.addCallback("triggerFlexPlay", play);
                ExternalInterface.addCallback("triggerFlexStopPlaying", stopPlaying);
                ExternalInterface.addCallback("triggerFlexUpload", uploadRecording);

                ExternalInterface.call('flexRecorderInitialised', '');
                

				oggManager = new OggManager();
				oggManager.progressNotifications = true;
				notifyProgress = true;
				//Ogg Manager Events
				oggManager.addEventListener(OggManagerEvent.ENCODE_BEGIN, handleEncodeBegin, false, 0, true);
				oggManager.addEventListener(OggManagerEvent.ENCODE_PROGRESS, handleEncodeProgress, false, 0, true);
				oggManager.addEventListener(OggManagerEvent.ENCODE_COMPLETE, handleEncodeComplete, false, 0, true);
				
				oggManager.addEventListener(OggManagerEvent.WAV_ENCODE_BEGIN, handleWavEncodeBegin, false, 0, true);
				oggManager.addEventListener(OggManagerEvent.WAV_ENCODE_COMPLETE, handleWavEncodeComplete, false, 0, true);
				oggManager.addEventListener(OggManagerEvent.WAV_ENCODE_PROGRESS, handleWavEncodeProgress, false, 0, true);		

				
				Logger.log('OggManager initialised');

                //add the javascript callbacks
			}
            
            public function externalRecordClick():void {
                handleRecordClick(null);
            }

            public function externalPlayClick():void {
                handlePlayClick(null);
            }

            public function externalStopClick():void {
                handleStopClick(null);
            }
			
            private function handleRecordClick(event:Event):void
			{               
				micManager.toggleRecording();
			
				if (micManager.isRecording)
				{//disable
					Logger.log("Start Recording");
					ExternalInterface.call('recordClicked', '');
										
					if (playbackManager.isPlaying)
					{//stop
						playbackManager.stopPlay();
					}//stop
				}//disable       
			}
            
            private function stopRecording():void
			{               
				micManager.stopRecording();
                Logger.log("Stopped recording");
			}

			private function handleMicMuted(e:Event):void
			{
				Logger.log('micMuted event fired');
				ExternalInterface.call('micMuted', '');
			}

			private function handlePlaybackComplete(e:Event):void
			{
				Logger.log('playbackComplete event fired');
				ExternalInterface.call('playbackComplete', '');
			}

			private function startRecording():void
			{               
				Logger.log("Start Recording");
				micManager.startRecording();
			                                
                if (playbackManager.isPlaying)
                {//stop
                    playbackManager.stopPlay();
                }//stop
			}

			private function handleMicManagerChange(e:Event):void 
			{//handleMicManagerChange
				if (micManager.isRecording)
				{//update label
					Logger.log("Started Recording");
				}//update label
				else
				{//update label
					Logger.log("Stopped Recording");
				}//update label
			}//handleMicManagerChange
            
            private function play():void
            {
            	playbackManager.startPlay();
            }

            private function handlePlayClick(e:MouseEvent):void
            {
                play();
            }

            private function updateProgress(status:String):void
            {
                ExternalInterface.call('updateFlexProgress', status);
            }

            private function stopPlaying():void
            {
            	playbackManager.stopPlay();
            }

            private function handleStopClick(e:MouseEvent):void
            {
             	stopPlaying();   
            }



			private function handlePlayPauseClick(e:MouseEvent):void 
			{//handlePlayPauseClick
				Logger.log('toggling play!')
				playbackManager.togglePlay();
			}//handlePlayPauseClick

			private function handlePlaybackChange(e:Event):void 
			{//handlePlaybackChange
				if (playbackManager.isPlaying)
				{//update play button status
					ExternalInterface.call('startPlaying', '');
				}//update play button status
				else
				{//update play button status
					ExternalInterface.call('stopPlaying', '');
				}//update play button status
				
				if (playbackManager.newBytes)
				{//new bytes
					Logger.log("New Bytes Loaded");
				}//new bytes
			}//handlePlaybackChange
		   
			private function uploadRecording(sourceName:String):void {
				var oggComments:OggComments = new OggComments();
				Logger.log("Saving as " + sourceName);
				this.sourceName = sourceName;
				oggComments.title = '9dialstitle';
				oggComments.album = '9dialsalbum';
				oggComments.artist = '9dialsartist';
				
				if (playbackManager.isPlaying)
				{//stop
					playbackManager.stopPlay();
				}//stop
				
				Logger.log("Starting Encode...");
				Logger.log("Encode Quality: " + encodeQuality);
				Logger.log("Encode Loops Per Yield: " + encodeLoopsPerYield);
				Logger.log("Bytes to encode: " + playbackManager.playBackBytes.length)
								
				startTime = getTimer();
				oggManager.encode(playbackManager.playBackBytes, oggComments, encodeQuality, 10,encodeLoopsPerYield, notifyProgress);
			}//handleUploadClick
			
			private function handleEncodeComplete(e:OggManagerEvent):void 
			{//handleEncodeComplete
				Logger.log("Ogg Vorbis Encode Complete: " + (Math.round((getTimer() - vorbisStartTime)/1000) + " second(s)"));
				Logger.log("Total Encode Time: " + (Math.round((getTimer() - startTime)/1000) + " second(s)"));
                updateProgress('Encoding complete');
				uploadManager.upload(oggManager.encodedBytes, this.sourceName);				
			}//handleEncodeComplete
			
			private function handleEncodeBegin(e:OggManagerEvent):void 
			{//handleEncodeBegin
				Logger.log("Ogg Vorbis Encode Start...");
				vorbisStartTime = getTimer();
			}//handleEncodeBegin
			
			private function handleEncodeProgress(e:OggManagerEvent):void 
			{//handleEncodeProgress
				updateProgress("Encoding : " + int(parseFloat(e.data.toString()) * 100)  + "%");
			}//handleEncodeProgress
			
			private function handleWavEncodeComplete(e:OggManagerEvent):void 
			{//handleWavEncodeComplete
				updateProgress('WAV encoding complete');
				Logger.log("WAV encoding completed: " + (Math.round((getTimer() - wavStartTime)/1000)) + " second(s)");
			}//handleWavEncodeComplete
			
			private function handleWavEncodeBegin(e:OggManagerEvent):void 
			{//handleWavEncodeBegin
				Logger.log("WAV encoding started...");
				wavStartTime = getTimer();
			}//handleWavEncodeBeing
			
			private function handleWavEncodeProgress(e:OggManagerEvent):void 
			{//handleWavEncodeProgress
				updateProgress("WAV Progress: " + e.data);
			}//handleWavEncodeProgress

			private function handleUploadComplete(e:UploadManagerEvent):void 
			{//handleUploadComplete
				Logger.log("Total Upload Time: " + (Math.round((getTimer() - startTime)/1000) + " second(s)"));
				Logger.log(e.data);
				ExternalInterface.call('sourceUploadComplete', e.data);
			}//handleUploadComplete
			
		]]>
	</fx:Script>
</s:Application>

